{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,gBAAiBF,SAASC,cAAc,uBACxCE,eAAgBH,SAASC,cAAc,sBACvCG,YAAaJ,SAASC,cAAc,yBAkCtC,SAASI,EAAcC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IAEtBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAC1BA,EAAM,G,CAxCbT,EAAKC,KAAKgB,iBAAiB,UAG3B,SAAsBC,GACpBA,EAAMC,iBAGN,IAAIC,EAAaC,OAAOrB,EAAKI,gBAAgBkB,OACzCC,EAAOF,OAAOrB,EAAKK,eAAeiB,OAClCE,EAASH,OAAOrB,EAAKM,YAAYgB,OAGrC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAEhClB,EAAckB,EAAGL,GACdM,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAqBrB,QAAiBC,MAAU,IAGnDqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAA7B,GAAS8B,OAAOG,QACd,sBAAoBvB,QAAeC,MAAU,IAInDW,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelayInput: document.querySelector(\"input[name='delay']\"),\n  delayStepInput: document.querySelector(\"input[name='step']\"),\n  amountInput: document.querySelector(\"input[name='amount']\"),\n};\n\nrefs.form.addEventListener('submit', onSubmitForm);\n\n// function that gather input information entered by the user and passing this info as a parameter to the createPromise function\nfunction onSubmitForm(event) {\n  event.preventDefault();\n\n  // Input values that typed by the user turned into a Number type\n  let firstDelay = Number(refs.firstDelayInput.value);\n  let step = Number(refs.delayStepInput.value);\n  let amount = Number(refs.amountInput.value);\n\n  // for loop that run for duration of amount entered by user\n  for (let i = 1; i <= amount; i += 1) {\n    //calling function createPromise and passing parameters \"i\"(count) to  \"position\" and number entered by user firstDelay to \"delay\"\n    createPromise(i, firstDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    // adding a step to the firstDelay that was entered by the user to each iteration\n    firstDelay += step;\n  }\n}\n\n// function that creates a promise and returns it\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["$4vA6L","parcelRequire","$75aa520dfb7f3d3e$var$refs","form","document","querySelector","firstDelayInput","delayStepInput","amountInput","$75aa520dfb7f3d3e$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","firstDelay","Number","value","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.40e00389.js.map"}